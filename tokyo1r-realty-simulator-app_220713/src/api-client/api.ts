/* tslint:disable */
/* eslint-disable */
/**
 * Tokyo 1R Simulator API
 * The api for Tokyo 1R Simulator
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CreateMyPropertyDto
 */
export interface CreateMyPropertyDto {
    /**
     * 
     * @type {string}
     * @memberof CreateMyPropertyDto
     */
    'title': string;
    /**
     * 
     * @type {PropertyOwnerDto}
     * @memberof CreateMyPropertyDto
     */
    'owner': PropertyOwnerDto;
    /**
     * 
     * @type {string}
     * @memberof CreateMyPropertyDto
     */
    'builtAt': string;
    /**
     * 
     * @type {number}
     * @memberof CreateMyPropertyDto
     */
    'propertyPrice': number;
    /**
     * 
     * @type {number}
     * @memberof CreateMyPropertyDto
     */
    'initialPayment': number;
    /**
     * 
     * @type {number}
     * @memberof CreateMyPropertyDto
     */
    'rentRevenue': number;
    /**
     * 
     * @type {boolean}
     * @memberof CreateMyPropertyDto
     */
    'isRentRevenueGuaranteed': boolean;
    /**
     * 
     * @type {number}
     * @memberof CreateMyPropertyDto
     */
    'borrowingAmount': number;
    /**
     * 
     * @type {number}
     * @memberof CreateMyPropertyDto
     */
    'annualInterestRate': number;
    /**
     * 
     * @type {number}
     * @memberof CreateMyPropertyDto
     */
    'borrowingPeriodInYears': number;
    /**
     * 
     * @type {number}
     * @memberof CreateMyPropertyDto
     */
    'rentCollectionServiceFee': number;
    /**
     * 
     * @type {number}
     * @memberof CreateMyPropertyDto
     */
    'managementCost': number;
    /**
     * 
     * @type {number}
     * @memberof CreateMyPropertyDto
     */
    'repairReserve': number;
    /**
     * 
     * @type {string}
     * @memberof CreateMyPropertyDto
     */
    'cover'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMyPropertyDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMyPropertyDto
     */
    'body'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateMyPropertyDto
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {PropertyAddressDto}
     * @memberof CreateMyPropertyDto
     */
    'address'?: PropertyAddressDto;
    /**
     * 
     * @type {number}
     * @memberof CreateMyPropertyDto
     */
    'numberOfSquareMeters'?: number;
    /**
     * 
     * @type {PropertyDetailDto}
     * @memberof CreateMyPropertyDto
     */
    'detail'?: PropertyDetailDto;
}
/**
 * 
 * @export
 * @interface CreatePropertyDto
 */
export interface CreatePropertyDto {
    /**
     * 
     * @type {string}
     * @memberof CreatePropertyDto
     */
    'title': string;
    /**
     * 
     * @type {PropertyOwnerDto}
     * @memberof CreatePropertyDto
     */
    'owner': PropertyOwnerDto;
    /**
     * 
     * @type {string}
     * @memberof CreatePropertyDto
     */
    'builtAt': string;
    /**
     * 
     * @type {number}
     * @memberof CreatePropertyDto
     */
    'propertyPrice': number;
    /**
     * 
     * @type {number}
     * @memberof CreatePropertyDto
     */
    'initialPayment': number;
    /**
     * 
     * @type {number}
     * @memberof CreatePropertyDto
     */
    'rentRevenue': number;
    /**
     * 
     * @type {boolean}
     * @memberof CreatePropertyDto
     */
    'isRentRevenueGuaranteed': boolean;
    /**
     * 
     * @type {number}
     * @memberof CreatePropertyDto
     */
    'borrowingAmount': number;
    /**
     * 
     * @type {number}
     * @memberof CreatePropertyDto
     */
    'annualInterestRate': number;
    /**
     * 
     * @type {number}
     * @memberof CreatePropertyDto
     */
    'borrowingPeriodInYears': number;
    /**
     * 
     * @type {number}
     * @memberof CreatePropertyDto
     */
    'rentCollectionServiceFee': number;
    /**
     * 
     * @type {number}
     * @memberof CreatePropertyDto
     */
    'managementCost': number;
    /**
     * 
     * @type {number}
     * @memberof CreatePropertyDto
     */
    'repairReserve': number;
    /**
     * 
     * @type {string}
     * @memberof CreatePropertyDto
     */
    'cover'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePropertyDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePropertyDto
     */
    'body'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreatePropertyDto
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {PropertyAddressDto}
     * @memberof CreatePropertyDto
     */
    'address'?: PropertyAddressDto;
    /**
     * 
     * @type {number}
     * @memberof CreatePropertyDto
     */
    'numberOfSquareMeters'?: number;
    /**
     * 
     * @type {PropertyDetailDto}
     * @memberof CreatePropertyDto
     */
    'detail'?: PropertyDetailDto;
}
/**
 * 
 * @export
 * @interface PropertyAddress
 */
export interface PropertyAddress {
    /**
     * 
     * @type {string}
     * @memberof PropertyAddress
     */
    'postalCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyAddress
     */
    'principal'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyAddress
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyAddress
     */
    'additionalInfo'?: string;
}
/**
 * 
 * @export
 * @interface PropertyAddressDto
 */
export interface PropertyAddressDto {
    /**
     * 
     * @type {string}
     * @memberof PropertyAddressDto
     */
    'postalCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyAddressDto
     */
    'principal'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyAddressDto
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyAddressDto
     */
    'additionalInfo'?: string;
}
/**
 * 
 * @export
 * @interface PropertyDetail
 */
export interface PropertyDetail {
    /**
     * 
     * @type {number}
     * @memberof PropertyDetail
     */
    'rentChangeRate'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDetail
     */
    'sellingPriceChangeRate'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDetail
     */
    'propertyPriceDropRate'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDetail
     */
    'vacancyRate'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDetail
     */
    'propertyAcquisitionTax'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDetail
     */
    'otherPayments'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDetail
     */
    'propertyTax'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDetail
     */
    'fireInsurance'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDetail
     */
    'bathroomDryer'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDetail
     */
    'airConditioner'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDetail
     */
    'boiler'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDetail
     */
    'wallpaperReplacement'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDetail
     */
    'floorReplacement'?: number;
}
/**
 * 
 * @export
 * @interface PropertyDetailDto
 */
export interface PropertyDetailDto {
    /**
     * 
     * @type {number}
     * @memberof PropertyDetailDto
     */
    'rentChangeRate'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDetailDto
     */
    'sellingPriceChangeRate'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDetailDto
     */
    'propertyPriceDropRate'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDetailDto
     */
    'vacancyRate'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDetailDto
     */
    'propertyAcquisitionTax'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDetailDto
     */
    'otherPayments'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDetailDto
     */
    'propertyTax'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDetailDto
     */
    'fireInsurance'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDetailDto
     */
    'bathroomDryer'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDetailDto
     */
    'airConditioner'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDetailDto
     */
    'boiler'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDetailDto
     */
    'wallpaperReplacement'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDetailDto
     */
    'floorReplacement'?: number;
}
/**
 * 
 * @export
 * @interface PropertyDocument
 */
export interface PropertyDocument {
    /**
     * 
     * @type {string}
     * @memberof PropertyDocument
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof PropertyDocument
     */
    'builtAt': string;
    /**
     * 
     * @type {PropertyOwner}
     * @memberof PropertyDocument
     */
    'owner': PropertyOwner;
    /**
     * 
     * @type {number}
     * @memberof PropertyDocument
     */
    'propertyPrice': number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDocument
     */
    'initialPayment': number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDocument
     */
    'rentRevenue': number;
    /**
     * 
     * @type {boolean}
     * @memberof PropertyDocument
     */
    'isRentRevenueGuaranteed': boolean;
    /**
     * 
     * @type {number}
     * @memberof PropertyDocument
     */
    'rentCollectionServiceFee': number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDocument
     */
    'managementCost': number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDocument
     */
    'repairReserve': number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDocument
     */
    'borrowingAmount': number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDocument
     */
    'annualInterestRate': number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDocument
     */
    'borrowingPeriodInYears': number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDocument
     */
    'monthlyLoanPaymentAmount': number;
    /**
     * 
     * @type {string}
     * @memberof PropertyDocument
     */
    'cover'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyDocument
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyDocument
     */
    'body'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PropertyDocument
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {PropertyAddress}
     * @memberof PropertyDocument
     */
    'address'?: PropertyAddress;
    /**
     * 
     * @type {number}
     * @memberof PropertyDocument
     */
    'numberOfSquareMeters'?: number;
    /**
     * 
     * @type {PropertyDetail}
     * @memberof PropertyDocument
     */
    'detail'?: PropertyDetail;
    /**
     * 
     * @type {string}
     * @memberof PropertyDocument
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyDocument
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyDocument
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface PropertyOwner
 */
export interface PropertyOwner {
    /**
     * 
     * @type {string}
     * @memberof PropertyOwner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PropertyOwner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyOwner
     */
    'avatarUrl'?: string;
}
/**
 * 
 * @export
 * @interface PropertyOwnerDto
 */
export interface PropertyOwnerDto {
    /**
     * 
     * @type {string}
     * @memberof PropertyOwnerDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PropertyOwnerDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyOwnerDto
     */
    'avatarUrl'?: string;
}
/**
 * 
 * @export
 * @interface UpdateMyPropertyDto
 */
export interface UpdateMyPropertyDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateMyPropertyDto
     */
    'title'?: string;
    /**
     * 
     * @type {PropertyOwnerDto}
     * @memberof UpdateMyPropertyDto
     */
    'owner'?: PropertyOwnerDto;
    /**
     * 
     * @type {string}
     * @memberof UpdateMyPropertyDto
     */
    'builtAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateMyPropertyDto
     */
    'propertyPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateMyPropertyDto
     */
    'initialPayment'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateMyPropertyDto
     */
    'rentRevenue'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateMyPropertyDto
     */
    'isRentRevenueGuaranteed'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof UpdateMyPropertyDto
     */
    'borrowingAmount'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateMyPropertyDto
     */
    'annualInterestRate'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateMyPropertyDto
     */
    'borrowingPeriodInYears'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateMyPropertyDto
     */
    'rentCollectionServiceFee'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateMyPropertyDto
     */
    'managementCost'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateMyPropertyDto
     */
    'repairReserve'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateMyPropertyDto
     */
    'cover'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMyPropertyDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMyPropertyDto
     */
    'body'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateMyPropertyDto
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {PropertyAddressDto}
     * @memberof UpdateMyPropertyDto
     */
    'address'?: PropertyAddressDto;
    /**
     * 
     * @type {number}
     * @memberof UpdateMyPropertyDto
     */
    'numberOfSquareMeters'?: number;
    /**
     * 
     * @type {PropertyDetailDto}
     * @memberof UpdateMyPropertyDto
     */
    'detail'?: PropertyDetailDto;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateMyPropertyDto} createMyPropertyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myPropertiesControllerCreate: async (createMyPropertyDto: CreateMyPropertyDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createMyPropertyDto' is not null or undefined
            assertParamExists('myPropertiesControllerCreate', 'createMyPropertyDto', createMyPropertyDto)
            const localVarPath = `/api/v1/my-properties`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMyPropertyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myPropertiesControllerFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/my-properties`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myPropertiesControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('myPropertiesControllerFindOne', 'id', id)
            const localVarPath = `/api/v1/my-properties/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myPropertiesControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('myPropertiesControllerRemove', 'id', id)
            const localVarPath = `/api/v1/my-properties/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateMyPropertyDto} updateMyPropertyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myPropertiesControllerUpdate: async (id: string, updateMyPropertyDto: UpdateMyPropertyDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('myPropertiesControllerUpdate', 'id', id)
            // verify required parameter 'updateMyPropertyDto' is not null or undefined
            assertParamExists('myPropertiesControllerUpdate', 'updateMyPropertyDto', updateMyPropertyDto)
            const localVarPath = `/api/v1/my-properties/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMyPropertyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreatePropertyDto} createPropertyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesControllerCreate: async (createPropertyDto: CreatePropertyDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPropertyDto' is not null or undefined
            assertParamExists('propertiesControllerCreate', 'createPropertyDto', createPropertyDto)
            const localVarPath = `/api/v1/properties`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPropertyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesControllerFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/properties`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('propertiesControllerFindOne', 'id', id)
            const localVarPath = `/api/v1/properties/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('propertiesControllerRemove', 'id', id)
            const localVarPath = `/api/v1/properties/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesControllerUpdate: async (id: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('propertiesControllerUpdate', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('propertiesControllerUpdate', 'body', body)
            const localVarPath = `/api/v1/properties/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreate: async (body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('usersControllerCreate', 'body', body)
            const localVarPath = `/api/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerFindOne', 'id', id)
            const localVarPath = `/api/v1/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerRemove', 'id', id)
            const localVarPath = `/api/v1/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdate: async (id: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerUpdate', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('usersControllerUpdate', 'body', body)
            const localVarPath = `/api/v1/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetHello(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetHello(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateMyPropertyDto} createMyPropertyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async myPropertiesControllerCreate(createMyPropertyDto: CreateMyPropertyDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.myPropertiesControllerCreate(createMyPropertyDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async myPropertiesControllerFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PropertyDocument>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.myPropertiesControllerFindAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async myPropertiesControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.myPropertiesControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async myPropertiesControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.myPropertiesControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateMyPropertyDto} updateMyPropertyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async myPropertiesControllerUpdate(id: string, updateMyPropertyDto: UpdateMyPropertyDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.myPropertiesControllerUpdate(id, updateMyPropertyDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreatePropertyDto} createPropertyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async propertiesControllerCreate(createPropertyDto: CreatePropertyDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.propertiesControllerCreate(createPropertyDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async propertiesControllerFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PropertyDocument>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.propertiesControllerFindAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async propertiesControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.propertiesControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async propertiesControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.propertiesControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async propertiesControllerUpdate(id: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.propertiesControllerUpdate(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerCreate(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerCreate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerFindAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerUpdate(id: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerUpdate(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello(options?: any): AxiosPromise<string> {
            return localVarFp.appControllerGetHello(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateMyPropertyDto} createMyPropertyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myPropertiesControllerCreate(createMyPropertyDto: CreateMyPropertyDto, options?: any): AxiosPromise<PropertyDocument> {
            return localVarFp.myPropertiesControllerCreate(createMyPropertyDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myPropertiesControllerFindAll(options?: any): AxiosPromise<Array<PropertyDocument>> {
            return localVarFp.myPropertiesControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myPropertiesControllerFindOne(id: string, options?: any): AxiosPromise<PropertyDocument> {
            return localVarFp.myPropertiesControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myPropertiesControllerRemove(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.myPropertiesControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateMyPropertyDto} updateMyPropertyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myPropertiesControllerUpdate(id: string, updateMyPropertyDto: UpdateMyPropertyDto, options?: any): AxiosPromise<PropertyDocument> {
            return localVarFp.myPropertiesControllerUpdate(id, updateMyPropertyDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreatePropertyDto} createPropertyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesControllerCreate(createPropertyDto: CreatePropertyDto, options?: any): AxiosPromise<PropertyDocument> {
            return localVarFp.propertiesControllerCreate(createPropertyDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesControllerFindAll(options?: any): AxiosPromise<Array<PropertyDocument>> {
            return localVarFp.propertiesControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesControllerFindOne(id: string, options?: any): AxiosPromise<PropertyDocument> {
            return localVarFp.propertiesControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesControllerRemove(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.propertiesControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesControllerUpdate(id: string, body: object, options?: any): AxiosPromise<PropertyDocument> {
            return localVarFp.propertiesControllerUpdate(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreate(body: object, options?: any): AxiosPromise<string> {
            return localVarFp.usersControllerCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindAll(options?: any): AxiosPromise<string> {
            return localVarFp.usersControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindOne(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.usersControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRemove(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.usersControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdate(id: string, body: object, options?: any): AxiosPromise<string> {
            return localVarFp.usersControllerUpdate(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appControllerGetHello(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).appControllerGetHello(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateMyPropertyDto} createMyPropertyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public myPropertiesControllerCreate(createMyPropertyDto: CreateMyPropertyDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).myPropertiesControllerCreate(createMyPropertyDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public myPropertiesControllerFindAll(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).myPropertiesControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public myPropertiesControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).myPropertiesControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public myPropertiesControllerRemove(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).myPropertiesControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateMyPropertyDto} updateMyPropertyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public myPropertiesControllerUpdate(id: string, updateMyPropertyDto: UpdateMyPropertyDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).myPropertiesControllerUpdate(id, updateMyPropertyDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreatePropertyDto} createPropertyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public propertiesControllerCreate(createPropertyDto: CreatePropertyDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).propertiesControllerCreate(createPropertyDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public propertiesControllerFindAll(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).propertiesControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public propertiesControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).propertiesControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public propertiesControllerRemove(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).propertiesControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public propertiesControllerUpdate(id: string, body: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).propertiesControllerUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersControllerCreate(body: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersControllerCreate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersControllerFindAll(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersControllerRemove(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersControllerUpdate(id: string, body: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersControllerUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}


